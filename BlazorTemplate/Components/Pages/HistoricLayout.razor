@using System.Text.Json
@using Newtonsoft.Json.Linq
@using System.Reflection
@using System.IO
@using System.Text
@using BlazorTemplate.Models
@using BlazorTemplate.Interfaces
@using BlazorTemplate.Processes
@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorTemplate.Services
@using BlazorTemplate.Components.Dialog
@inject IDialogService _dialogService
@inject IOrderService _orderService
@inject ISelectedOrdersService _selectedOrdersService
@inject NavigationManager _navigationManager
@inject SQLManagement sqlManagement
@inject IBatchService _batchService
@page "/HistoricLayout"
@implements IDisposable

<PageTitle>Orders Historic</PageTitle>
<h1>Orders Historic</h1>

<!-- Main container -->
<div class="grid-and-pagination-container">
    <!-- Grid container -->
    <div class="fixed-height-grid-container">
        <FluentDataGrid Items="@orders" TGridItem="Order" Pagination="@pagination" Class="fixed-row-grid">

            <PropertyColumn Property="@(o => o.ID)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Client)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Date)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.Expiration)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.LineCount)" Title="Lines" Sortable="true" />

            <TemplateColumn Title="Processed">
                <ChildContent>
                    <div style="display: flex; justify-content: flex-start;">
                        @if (context.IsProcessed == 1)
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size20.CheckmarkCircle())" Color="Color.Success" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size20.DismissCircle())" Color="Color.Neutral" />
                        }
                    </div>
                </ChildContent>
            </TemplateColumn>

            <!-- New column to show if it has an error -->
            <TemplateColumn Title="Error">
                <ChildContent>
                    <div style="display: flex; justify-content: flex-start;">
                        @if (context.HasError == 1)
                        {
                            <div @onclick="@(() => ShowErrorDetails(context.ID))" style="cursor: pointer;">
                                <FluentIcon Value="@(new Icons.Regular.Size20.ErrorCircle())" Color="Color.Error" />
                            </div>
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size20.CheckmarkCircle())" Color="Color.Success" />
                        }
                    </div>
                </ChildContent>
            </TemplateColumn>

            <!-- Column to view details -->
            <TemplateColumn Title="">
                <ChildContent>
                    <button @onclick="@(() => HandleRowClick(context))"
                            style="background: none; border: none; padding: 0; margin: 0; cursor: pointer; display: flex; justify-content: center; align-items: center;">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Eye())" Color="Color.Accent" />
                    </button>
                </ChildContent>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

    <!-- Container for counter and paginator -->
    <div class="paginator-container">
        <div class="left-section"></div>
        <div class="right-section">
            <FluentPaginator State="@pagination" />
        </div>
    </div>
</div>

@if (selectedOrder != null)
{
    <h2>Order Detail: @selectedOrder.ID - @selectedOrder.Client</h2>

    @if (selectedOrderItems != null && selectedOrderItems.Any())
    {
        <div class="detail-container">
            <FluentDataGrid Items="@selectedOrderItems" TGridItem="OrderLineItem" Class="detail-grid">
                <PropertyColumn Property="@(li => li.LineNumber + 1)" Title="Line" Sortable="true" />
                <PropertyColumn Property="@(li => li.ItemCode)" Title="Item" Sortable="true" />
                <PropertyColumn Property="@(li => li.Quantity)" Title="Quantity" Sortable="true" />
                <!-- Remove this Assigned Batch column -->
                <!-- <PropertyColumn Property="@(li => li.Batch)" Title="Assigned Batch" Sortable="true" /> -->
                <TemplateColumn Title="Information">
                    <ChildContent>
                        @if (!string.IsNullOrEmpty(context.Batch) && context.Batch != "Unassigned" && selectedOrder.IsProcessed == 1)
                        {
                            <button @onclick="@(() => OpenBatchInfoDialog(context))"
                                    style="background: none; border: none; padding: 0; margin: 0; cursor: pointer; display: flex; justify-content: center; align-items: center;"
                                    title="View assigned batch information">
                                <FluentIcon Value="@(new Icons.Regular.Size20.SlideSearch())" Color="Color.Accent" />
                            </button>
                        }
                    </ChildContent>
                </TemplateColumn>
            </FluentDataGrid>
        </div>
    }
    else
    {
        <div class="alert alert-info" style="margin-top: 20px">
            There are no lines available for this order.
        </div>
    }
}

@code {
    // Modify the record to include IsProcessed and HasError
    record Order(int ID, string Client, DateOnly Date, DateOnly Expiration, int LineCount, int IsProcessed, int HasError);
    record OrderLineItem(int LineNumber, string ItemCode, int Quantity, string Batch);

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Order> orders;
    private List<OrderData> processedOrders = new List<OrderData>();
    private Order selectedOrder;
    private IQueryable<OrderLineItem> selectedOrderItems;
    private System.Threading.Timer refreshTimer;
    private bool isLoading = false;
    private bool isInfoDialogOpen = false;
    private int currentOrderId;
    private int currentLineNumber;
    private string currentItemCode;
    private int currentQuantity;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChargeInitialOrders();
    }

    // Method to charge initial valid orders
    public async void ChargeInitialOrders()
    {
        await LoadOrdersFromSQL();
    }

    private async Task LoadOrdersFromSQL()
    {
        try
        {
            // Modify to get all orders (including processed and with errors)
            var sqlOrders = sqlManagement.GetAllOrdersFromDatabase(); // You'll need to create this method

            // Convert to format for the grid, including IsProcessed and HasError
            var orderList = sqlOrders.Select(o => new Order(
                o.DocEntry,
                o.CardCode,
                DateOnly.FromDateTime(o.OrderDate),
                DateOnly.FromDateTime(o.DocDueDate),
                sqlManagement.GetOrderLinesFromDatabase(o.DocEntry).Count,
                o.IsProcessed,
                o.HasError
            )).ToList();

            orders = orderList.AsQueryable();

            // Clear current selection if it exists
            selectedOrder = null;
            selectedOrderItems = null;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error loading orders from SQL: {ex.Message}", ex);
        }
    }

    private async void HandleRowClick(Order order)
    {
        if (order == null || order.ID <= 0) return;  // Ignore clicks on empty rows (ID ≤ 0)

        selectedOrder = order;
        StateHasChanged(); // Force update to show the detail section header

        try
        {
            // Get order lines from SQL
            var lineItemsFromDB = sqlManagement.GetOrderLinesFromDatabase(selectedOrder.ID);
            Console.WriteLine($"Lines retrieved for order {selectedOrder.ID}: {lineItemsFromDB.Count}");

            if (lineItemsFromDB != null && lineItemsFromDB.Any())
            {
                // Convert lines to format for the grid
                var lineItems = new List<OrderLineItem>();

                // If the order is processed, get assigned batches
                if (order.IsProcessed == 1)
                {
                    try
                    {
                        // Use BatchService to get assigned batches
                        var assignedBatches = await _batchService.GetAssignedBatchesFromDatabaseAsync(order.ID);

                        // Handle each line separately
                        foreach (var li in lineItemsFromDB)
                        {
                            // Look for assigned batches for this line
                            var lineBatches = assignedBatches
                                .Where(ab => ab.LineNum == li.LineNum)
                                .ToList();

                            string batchInfo;
                            if (lineBatches.Any())
                            {
                                // If there are assigned batches, use them (they are the real values)
                                batchInfo = string.Join(", ", lineBatches.Select(ab => ab.BatchNum));
                            }
                            else
                            {
                                // If there are no assigned batches in the database, show "Unassigned"
                                batchInfo = "Unassigned";
                            }

                            lineItems.Add(new OrderLineItem(
                                li.LineNum,
                                li.ItemCode,
                                li.Quantity,
                                batchInfo
                            ));
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error getting assigned batches: {ex.Message}");

                        // If getting batches fails, use lines without batch information
                        lineItems = lineItemsFromDB
                            .Select(li => new OrderLineItem(
                                li.LineNum,
                                li.ItemCode,
                                li.Quantity,
                                "Unassigned" // Default value
                            ))
                            .ToList();
                    }
                }
                else
                {
                    // If the order is not processed, simply show "Unassigned"
                    lineItems = lineItemsFromDB
                        .Select(li => new OrderLineItem(
                            li.LineNum,
                            li.ItemCode,
                            li.Quantity,
                            "Unassigned" // No batches assigned for unprocessed orders
                        ))
                        .ToList();
                }

                selectedOrderItems = lineItems.AsQueryable();
            }
            else
            {
                // If no lines are found, show an empty collection
                selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting lines for order {order.ID}: {ex.Message}");
            // If an error occurs, show an empty collection
            selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
        }

        // Second call to StateHasChanged to update the lines grid
        StateHasChanged();
    }

    // Method to show error details
    private async Task ShowErrorDetails(int orderId)
    {
        try
        {
            // Get the error message from the database
            string errorMessage = await sqlManagement.GetOrderErrorMessageAsync(orderId);

            if (!string.IsNullOrEmpty(errorMessage))
            {
                // Format the message for better visualization
                var formattedMessage = errorMessage
                    .Replace("\n", "<br/>")
                    .Replace("- Item:", "<div style='margin-top: 8px; margin-bottom: 5px;'><b>- Item:</b>")
                    .Replace("Required:", "<b>Required:</b>")
                    .Replace("Available:", "<b>Available:</b>")
                    .Replace("Difference:", "<b>Difference:</b></div>");

                // Show the dialog with the formatted message
                await _dialogService.ShowErrorAsync(formattedMessage, $"Error in Order {orderId}");

                // If you additionally want to show the JSON of the order with error
                var order = sqlManagement.GetOrderWithErrorInfoFromDB(orderId);
                if (order != null && order.HasError == 1)
                {
                    string jsonForFailedOrder = ConvertOrdersToJson(new List<OrderData> { order });
                    Console.WriteLine($"JSON for order with error {orderId}:");
                    Console.WriteLine(jsonForFailedOrder);

                    // Optional: show the JSON in another dialog or add it to the previous message
                    // await _dialogService.ShowInfoAsync(jsonForFailedOrder, "JSON of the order with error");
                }
            }
            else
            {
                await _dialogService.ShowInfoAsync("No error information found for this order.", "Information");
            }
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error getting error details: {ex.Message}", "Error");
        }
    }

    // Helper method to convert orders to JSON format (copied from your class)
    private string ConvertOrdersToJson(List<OrderData> orders)
    {
        try
        {
            // Create an anonymous object that represents the orders in the desired format for the API
            var apiOrders = orders.Select(o => new
            {
                id = o.DocEntry,
                client = o.CardCode,
                orderDate = o.OrderDate.ToString("yyyy-MM-dd"),
                dueDate = o.DocDueDate.ToString("yyyy-MM-dd"),
                isProcessed = o.IsProcessed,
                hasError = o.HasError,
                errorMessage = o.ErrorMessage,
                lines = o.LineItems.Select(li => new
                {
                    lineNumber = li.LineNum + 1,
                    itemCode = li.ItemCode,
                    quantity = li.Quantity
                }).ToList()
            }).ToList();

            // Serialize to JSON with indented format for better visualization
            var options = new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };

            return System.Text.Json.JsonSerializer.Serialize(apiOrders, options);
        }
        catch (Exception ex)
        {
            // In case of error, return error message as JSON
            return $"{{ \"error\": \"Error generating JSON: {ex.Message}\" }}";
        }
    }

    // Method to open the batch information dialog
    private void OpenBatchInfoDialog(OrderLineItem lineItem)
    {
        if (lineItem == null || selectedOrder == null) return;

        currentOrderId = selectedOrder.ID;
        currentLineNumber = lineItem.LineNumber;
        currentItemCode = lineItem.ItemCode;
        currentQuantity = lineItem.Quantity;

        isInfoDialogOpen = true;
        StateHasChanged();
    }

    // Method to handle the information dialog closing
    private void HandleInfoDialogClosed(bool isOpen)
    {
        isInfoDialogOpen = isOpen;
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
<BatchInfoDialogHistoric IsOpen="@isInfoDialogOpen"
                         IsOpenChanged="@HandleInfoDialogClosed"
                         OrderId="@currentOrderId"
                         LineNumber="@currentLineNumber"
                         ItemCode="@currentItemCode"
                         Quantity="@currentQuantity" />