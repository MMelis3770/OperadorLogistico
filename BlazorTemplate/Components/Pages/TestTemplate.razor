@using System.Text.Json
@using Newtonsoft.Json.Linq
@using System.Reflection
@using System.IO
@using System.Text
@using BlazorTemplate.Models
@using BlazorTemplate.Interfaces
@using BlazorTemplate.Processes
@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorTemplate.Services
@inject IDialogService _dialogService
@inject IOrderService _orderService
@inject ISelectedOrdersService _selectedOrdersService
@inject NavigationManager _navigationManager
@inject SQLManagement sqlManagement
@inject IBatchService _batchService
@page "/"
@implements IDisposable

<PageTitle>Order Management</PageTitle>
<h1>Order Management</h1>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
    <FluentButton Appearance="Appearance.Accent" OnClick="@LoadOrdersFromFiles">Load Orders</FluentButton>
    <FluentSpacer />

    <FluentButton Appearance="Appearance.Accent" Style="margin-right: 40px" BackgroundColor="#28a745"
    OnClick="@(async () => await NavigateToBatchWithSelected())">
        Upload Orders
    </FluentButton>

    @if (isLoading)
    {
        <FluentProgressRing />
        <span>Loading orders...</span>
    }
</FluentStack>

<!-- Contenedor principal -->
<div class="grid-and-pagination-container">
    <!-- Contenedor del grid -->
    <div class="fixed-height-grid-container">
        <FluentDataGrid Items="@orders" TGridItem="Order" Pagination="@pagination" Class="fixed-row-grid">

            <PropertyColumn Property="@(o => o.ID)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Client)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Date)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.Expiration)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.LineCount)" Title="Lines" Sortable="true" />
            <TemplateColumn Title="">
                <ChildContent>
                    <button @onclick="@(() => HandleRowClick(context))"
                    style="background: none; border: none; padding: 0; margin: 0; cursor: pointer; display: flex; justify-content: center; align-items: center;">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Eye())" Color="Color.Accent" />
                    </button>
                </ChildContent>
            </TemplateColumn>
            <TemplateColumn Title="">
                <ChildContent>
                    <div @onclick="@(() => ToggleCheckedState(context.ID))" @onclick:stopPropagation="true" style="cursor: pointer;">
                        @if (IsOrderChecked(context.ID))
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxChecked())" Color="Color.Accent" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxUnchecked())" Color="Color.Accent" />
                        }
                    </div>
                </ChildContent>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

    <!-- Contenedor para el contador y paginador -->
    <div class="paginator-container">
        <div class="left-section"></div>
        <div class="right-section">
            <FluentPaginator State="@pagination" />
        </div>
    </div>
</div>

@if (selectedOrder != null)
{
    <h2>Detalle de Comanda: @selectedOrder.ID - @selectedOrder.Client</h2>

    @if (selectedOrderItems != null && selectedOrderItems.Any())
    {
        <div class="detail-container">
            <FluentDataGrid Items="@selectedOrderItems" TGridItem="OrderLineItem" Class="detail-grid">
                <PropertyColumn Property="@(li => li.LineNumber + 1)" Title="Line" Sortable="true" />
                <PropertyColumn Property="@(li => li.ItemCode)" Title="Item" Sortable="true" />
                <PropertyColumn Property="@(li => li.Quantity)" Title="Quantity" Sortable="true" />
            </FluentDataGrid>
        </div>
    }
    else
    {
        <div class="alert alert-info" style="margin-top: 20px">
            There are no lines available for this order.
        </div>
    }
}

@code {
    record Order(int ID, string Client, DateOnly Date, DateOnly Expiration, int LineCount);
    record OrderLineItem(int LineNumber, string ItemCode, int Quantity);

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Order> orders;
    private List<OrderData> processedOrders = new List<OrderData>();
    private Order selectedOrder;
    private IQueryable<OrderLineItem> selectedOrderItems;
    private System.Threading.Timer refreshTimer;
    private bool isLoading = false;

    // Dictionary to track checked state for each order
    private Dictionary<int, bool> checkedOrders = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Limpiar órdenes seleccionadas anteriores al cargar esta página
        _selectedOrdersService.ClearSelectedOrders();
        ChargeInitialOrders();
    }

    // Method to charge initial valid orders
    public async void ChargeInitialOrders(){
        await LoadOrdersFromSQL();
    }

    // Method to check if an order is checked
    private bool IsOrderChecked(int orderId)
    {
        return checkedOrders.ContainsKey(orderId) && checkedOrders[orderId];
    }

    // Method to toggle the checked state
    private void ToggleCheckedState(int orderId)
    {
        if (checkedOrders.ContainsKey(orderId))
        {
            checkedOrders[orderId] = !checkedOrders[orderId];
        }
        else
        {
            checkedOrders[orderId] = true;
        }
        StateHasChanged();
    }

    // Método para navegar a LayoutBatch con las órdenes seleccionadas
    private async Task NavigateToBatchWithSelected()
    {
        // Obtener IDs de órdenes seleccionadas
        var selectedOrderIds = checkedOrders
            .Where(kvp => kvp.Value && kvp.Key > 0)
            .Select(kvp => kvp.Key)
            .ToList();

        if (selectedOrderIds.Count == 0)
        {
            await _dialogService.ShowInfoAsync("No hay comandas seleccionadas", "Información");
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            // Obtener las OrderData completas desde la base de datos
            var selectedOrdersData = new List<OrderData>();
            var ordersWithErrors = new List<OrderData>();
            var errorDetails = new Dictionary<int, string>();

            foreach (var orderId in selectedOrderIds)
            {
                // Obtener la orden desde la base de datos
                var order = sqlManagement.GetOrdersFromDatabase().FirstOrDefault(o => o.DocEntry == orderId);
                if (order != null)
                {
                    // Obtener las líneas de la orden
                    var lineItems = sqlManagement.GetOrderLinesFromDatabase(orderId);

                    // Crear OrderData usando tu modelo actual
                    var orderData = new OrderData
                        {
                            DocEntry = order.DocEntry,
                            CardCode = order.CardCode,
                            OrderDate = order.OrderDate,
                            DocDueDate = order.DocDueDate,
                            LineItems = lineItems.Select(li => new LineItem
                            {
                                DocEntry = li.DocEntry,
                                LineNum = li.LineNum,
                                ItemCode = li.ItemCode,
                                Quantity = li.Quantity,
                                Batch = null // El batch será asignado en LayoutBatch
                            }).ToList()
                        };

                    // Verificar stock disponible para cada línea
                    bool hasStockIssue = false;
                    StringBuilder errorMessageBuilder = new StringBuilder();
                    errorMessageBuilder.AppendLine($"Problemas de stock en comanda {order.DocEntry}:");
                    errorMessageBuilder.AppendLine();

                    foreach (var line in orderData.LineItems)
                    {
                        var (hasSufficientStock, availableQuantity) = await _batchService.ValidateStockAvailabilityAsync(line.ItemCode, line.Quantity);

                        if (!hasSufficientStock)
                        {
                            hasStockIssue = true;
                            errorMessageBuilder.AppendLine($"- Artículo: {line.ItemCode}, Requerido: {line.Quantity}, Disponible: {availableQuantity}, Diferencia: {line.Quantity - availableQuantity}");
                        }
                    }

                    // Si la orden tiene problemas de stock, marcarla con error
                    if (hasStockIssue)
                    {
                        string errorMessage = errorMessageBuilder.ToString();
                        await _batchService.UpdateOrderErrorStatusAsync(orderData.DocEntry, errorMessage);
                        errorDetails[orderData.DocEntry] = errorMessage;

                        var updatedOrder = sqlManagement.GetOrderWithErrorInfoFromDB(orderData.DocEntry);

                        // 3. Obtener las líneas actualizadas de la orden
                        var lineItem = sqlManagement.GetOrderLinesFromDatabase(orderData.DocEntry);

                        // 4. Crear un objeto OrderData completo con todos los datos actualizados
                        var completeOrderData = new OrderData
                            {
                                DocEntry = updatedOrder.DocEntry,
                                CardCode = updatedOrder.CardCode,
                                OrderDate = updatedOrder.OrderDate,
                                DocDueDate = updatedOrder.DocDueDate,
                                IsProcessed = updatedOrder.IsProcessed,
                                HasError = updatedOrder.HasError,
                                ErrorMessage = updatedOrder.ErrorMessage,
                                LineItems = lineItem
                            };

                        // 5. Generar el JSON para esta orden con error
                        string jsonForFailedOrder = ConvertOrdersToJson(new List<OrderData> { completeOrderData });

                        var content = new StringContent(jsonForFailedOrder, Encoding.UTF8, "application/json");

                        using var client = new HttpClient();
                        var response = await client.PostAsync("http://localhost:8080/api/Order", content);

                        // 6. Añadir a la lista de órdenes con errores
                        ordersWithErrors.Add(completeOrderData);

                        // Opcional: registrar el JSON en la consola
                        Console.WriteLine($"JSON para orden con error {completeOrderData.DocEntry}:");
                        Console.WriteLine(jsonForFailedOrder);
                    }
                    else
                    {
                        // Si no hay problemas de stock, agregarla a las órdenes seleccionadas
                        selectedOrdersData.Add(orderData);
                    }
                }
            }

            // Desactivar indicador de carga
            isLoading = false;
            StateHasChanged();

            // Manejo de casos de error
            if (selectedOrderIds.Count == 1 && ordersWithErrors.Count == 1)
            {
                // Si solo hay una orden seleccionada y tiene error, mostrar mensaje y no navegar
                var errorOrder = ordersWithErrors[0];
                var errorMessage = errorDetails[errorOrder.DocEntry];

                await _dialogService.ShowErrorAsync(errorMessage, $"Error de Stock en Comanda {errorOrder.DocEntry}");
                // No navegar después de mostrar el error
                await LoadOrdersFromSQL();

                return;
            }
            else if (ordersWithErrors.Count > 0 && selectedOrdersData.Count == 0)
            {
                // Si todas las órdenes tienen error, mostrar mensaje y no navegar
                var errorMessage = new StringBuilder();
                errorMessage.AppendLine("Todas las comandas seleccionadas tienen problemas de stock:");
                errorMessage.AppendLine();

                foreach (var errorOrder in ordersWithErrors)
                {
                    errorMessage.AppendLine($"- Comanda {errorOrder.DocEntry}: ");
                    errorMessage.AppendLine(errorDetails[errorOrder.DocEntry]);
                    errorMessage.AppendLine();
                }

                await _dialogService.ShowErrorAsync(errorMessage.ToString(), "Error de Stock");
                await LoadOrdersFromSQL();

                return;
            }
            else if (ordersWithErrors.Count > 0 && selectedOrdersData.Count > 0)
            {
                // Usar formato HTML para el mensaje
                var errorMessage = new StringBuilder();
                errorMessage.Append("<div style='margin-bottom: 15px;'>");
                errorMessage.Append("Algunas comandas tienen problemas de stock y no serán procesadas:");
                errorMessage.Append("</div>");

                foreach (var errorOrder in ordersWithErrors)
                {
                    errorMessage.Append($"<div style='margin-top: 15px; margin-bottom: 10px;'>");
                    errorMessage.Append($"<b>- Comanda {errorOrder.DocEntry}:</b>");
                    errorMessage.Append("</div>");

                    // Convertir los detalles del error a HTML
                    string htmlErrorDetails = errorDetails[errorOrder.DocEntry]
                        .Replace("\n", "<br/>")
                        .Replace("- Artículo:", "<div style='margin-top: 8px; margin-bottom: 5px;'><b>- Artículo:</b>")
                        .Replace("Requerido:", "<b>Requerido:</b>")
                        .Replace("Disponible:", "<b>Disponible:</b>")
                        .Replace("Diferencia:", "<b>Diferencia:</b></div>");

                    errorMessage.Append(htmlErrorDetails);
                }

                errorMessage.Append("<div style='margin-top: 25px; margin-bottom: 15px;'>");
                errorMessage.Append($"<b>Se procederá con las {selectedOrdersData.Count} comandas restantes que no tienen errores.</b>");
                errorMessage.Append("</div>");

                // Guardar órdenes válidas
                _selectedOrdersService.SetSelectedOrders(selectedOrdersData);

                // Mostrar el diálogo y esperar que se cierre
                var dialog = await _dialogService.ShowInfoAsync(errorMessage.ToString(), "Comandas con Problemas de Stock");
                await dialog.Result;

                // Solo después de que se presiona "OK" o se cierra el diálogo
                _navigationManager.NavigateTo("/LayoutBatch");


                return;
            }

            if (selectedOrdersData.Count == 0)
            {
                await _dialogService.ShowErrorAsync("No se pudieron cargar las órdenes seleccionadas", "Error");
                return;
            }

            // Si llegamos aquí, todas las órdenes son válidas
            Console.WriteLine($"Cargando {selectedOrdersData.Count} órdenes al servicio");
            _selectedOrdersService.SetSelectedOrders(selectedOrdersData);

            // Navegar a la página de Batch
            _navigationManager.NavigateTo("/LayoutBatch");
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            await _dialogService.ShowErrorAsync($"Error al preparar órdenes para batch: {ex.Message}", "Error");
            Console.WriteLine($"Error completo: {ex}");
        }
    }

    // Método auxiliar para convertir las órdenes a formato JSON
    private string ConvertOrdersToJson(List<OrderData> orders)
    {
        try
        {
            // Crear un objeto anónimo que represente las órdenes en el formato deseado para la API
            var apiOrders = orders.Select(o => new
            {
                id = o.DocEntry,
                client = o.CardCode,
                orderDate = o.OrderDate.ToString("yyyy-MM-dd"),
                dueDate = o.DocDueDate.ToString("yyyy-MM-dd"),
                isProcessed = o.IsProcessed, // Añadido campo IsProcessed
                hasError = o.HasError,       // Añadido campo HasError
                errorMessage = o.ErrorMessage, // Añadido campo ErrorMessage
                lines = o.LineItems.Select(li => new
                {
                    lineNumber = li.LineNum + 1,
                    itemCode = li.ItemCode,
                    quantity = li.Quantity
                }).ToList()
            }).ToList();

            // Serializar a JSON con formato indentado para mejor visualización
            var options = new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };

            return System.Text.Json.JsonSerializer.Serialize(apiOrders, options);
        }
        catch (Exception ex)
        {
            // En caso de error, devolver mensaje de error como JSON
            return $"{{ \"error\": \"Error al generar JSON: {ex.Message}\" }}";
        }
    }

    private async void ValidateOrdersBeforeSQL(List<OrderData> selectedOrdersData)
    {
        var ordersToSQL = selectedOrdersData;
        foreach (var order in ordersToSQL)
        {
            var cardCode = order.CardCode;
            var orderDate = order.OrderDate;
            var docDueDate = order.DocDueDate;

            // Validar que la fecha sea valida (fecha current entre OrderDate y DocDueDate)
            if (!ValidateOrderDate(orderDate, docDueDate))
            {
                throw new Exception($"Order {order.DocEntry} is not valid for the current date. " +
                                              $"Current date must be between {orderDate:yyyy-MM-dd} and {docDueDate:yyyy-MM-dd}");
            }

            // Validar si el cliente existe en la BBDD
            if (!sqlManagement.ValidateActiveClients(cardCode))
            {
                throw new Exception($"Client {cardCode} does not exist in the database");
            }

            foreach (var line in order.LineItems)
            {
                // Validar si el item existe en la BBDD
                if (!sqlManagement.GetItems(line.ItemCode))
                {
                    throw new Exception($"Item {line.ItemCode} does not exist in the database");
                }

                // Validar si hay batches suficientes para los items
                // if (!sqlManagement.GetBatches(line.ItemCode))
                // {
                //     throw new Exception($"Item {line.ItemCode} does not have any available batch");

                // }
            }
        }
        // sqlManagement.LoadOrdersToSQL(ordersToSQL);

    }


    public bool ValidateOrderDate(DateTime orderDate, DateTime docDueDate)
    {
        try
        {
            var currentDate = DateTime.Now.Date;
            return currentDate >= orderDate && currentDate <= docDueDate;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error validating order dates: {ex.Message}", ex);
        }
    }

    private async Task LoadOrdersFromFiles()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            // Usar OrderService para obtener órdenes desde archivos TXT
            processedOrders = await _orderService.GetOrdersAsync();

            // Validar órdenes antes de cargarlas a SQL
            ValidateOrdersBeforeSQL(processedOrders);

            // Cargar las órdenes en la base de datos SQL
            sqlManagement.LoadOrdersToSQL(processedOrders);

            // Obtener las órdenes desde la base de datos SQL
            await LoadOrdersFromSQL();

            await _dialogService.ShowInfoAsync($"Se han cargado {processedOrders.Count} comandas a la base de datos.", "Información");
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error al cargar comandas: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrdersFromSQL()
    {
        try
        {
            // Obtener órdenes desde la base de datos
            var sqlOrders = sqlManagement.GetOrdersFromDatabase();

            // Convertir a formato para la grid
            var orderList = sqlOrders.Select(o => new Order(
                o.DocEntry,
                o.CardCode,
                DateOnly.FromDateTime(o.OrderDate),
                DateOnly.FromDateTime(o.DocDueDate),
                sqlManagement.GetOrderLinesFromDatabase(o.DocEntry).Count  // Obtener el número real de líneas
            )).ToList();

            orders = orderList.AsQueryable();

            // Inicializar estado de checkboxes
            checkedOrders.Clear();
            foreach (var order in orderList.Where(o => o.ID > 0))
            {
                checkedOrders[order.ID] = false;
            }

            // Limpiar la selección actual si existe
            selectedOrder = null;
            selectedOrderItems = null;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error al cargar órdenes desde SQL: {ex.Message}", ex);
        }
    }

    private void HandleRowClick(Order order)
    {
        if (order == null || order.ID <= 0) return;  // Ignorar clics en filas vacías (ID ≤ 0)

        selectedOrder = order;
        StateHasChanged(); // Forzar actualización para mostrar el encabezado de la sección de detalles

        try
        {
            // Obtener las líneas de la orden desde SQL
            var lineItemsFromDB = sqlManagement.GetOrderLinesFromDatabase(selectedOrder.ID);

            Console.WriteLine($"Líneas recuperadas para orden {selectedOrder.ID}: {lineItemsFromDB.Count}");

            if (lineItemsFromDB != null && lineItemsFromDB.Any())
            {
                // Convertir las líneas al formato para la grid
                var lineItems = lineItemsFromDB
                    .Select(li => new OrderLineItem(
                        li.LineNum,
                        li.ItemCode,
                        li.Quantity
                    ))
                    .ToList();

                selectedOrderItems = lineItems.AsQueryable();
            }
            else
            {
                // Si no se encuentran líneas, mostrar una colección vacía
                selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener líneas para orden {order.ID}: {ex.Message}");
            // Si ocurre un error, mostrar una colección vacía
            selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
        }

        // Segunda llamada a StateHasChanged para actualizar la grid de líneas
        StateHasChanged();
    }

    private async Task ConfirmOrderToSAP(int orderId)
    {
        try
        {
            bool result = await _orderService.ConfirmOrderToSQL(orderId);

            if (result)
            {
                await _dialogService.ShowInfoAsync($"Orden {orderId} confirmada en SAP con éxito.", "Confirmación");
            }
            else
            {
                await _dialogService.ShowErrorAsync($"No se pudo confirmar la orden {orderId} en SAP.", "Error");
            }
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error al confirmar la orden en SAP: {ex.Message}", "Error");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}