@using System.Text.Json
@using Newtonsoft.Json.Linq
@using System.Reflection
@using System.IO
@using System.Text
@using BlazorTemplate.Models
@using BlazorTemplate.Interfaces
@using BlazorTemplate.Processes
@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorTemplate.Services
@inject IDialogService _dialogService
@inject IOrderService _orderService
@inject ISelectedOrdersService _selectedOrdersService
@inject NavigationManager _navigationManager
@inject SQLManagement sqlManagement
@inject IBatchService _batchService
@page "/"
@implements IDisposable

<PageTitle>Order Management</PageTitle>
<h1>Order Management</h1>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
    <FluentButton Appearance="Appearance.Accent" OnClick="@LoadOrdersFromFiles">Load Orders</FluentButton>
    <FluentSpacer />

    <FluentButton Appearance="Appearance.Accent" Style="margin-right: 40px" BackgroundColor="#28a745"
                  OnClick="@(async () => await NavigateToBatchWithSelected())">
        Upload Orders
    </FluentButton>

    @if (isLoading)
    {
        <FluentProgressRing />
        <span>Loading orders...</span>
    }
</FluentStack>

<!-- Main container -->
<div class="grid-and-pagination-container">
    <!-- Grid container -->
    <div class="fixed-height-grid-container">
        <FluentDataGrid Items="@orders" TGridItem="Order" Pagination="@pagination" Class="fixed-row-grid">

            <PropertyColumn Property="@(o => o.ID)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Client)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Date)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.Expiration)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.LineCount)" Title="Lines" Sortable="true" />
            <TemplateColumn Title="">
                <ChildContent>
                    <button @onclick="@(() => HandleRowClick(context))"
                            style="background: none; border: none; padding: 0; margin: 0; cursor: pointer; display: flex; justify-content: center; align-items: center;">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Eye())" Color="Color.Accent" />
                    </button>
                </ChildContent>
            </TemplateColumn>
            <TemplateColumn Title="">
                <ChildContent>
                    <div @onclick="@(() => ToggleCheckedState(context.ID))" @onclick:stopPropagation="true" style="cursor: pointer;">
                        @if (IsOrderChecked(context.ID))
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxChecked())" Color="Color.Accent" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxUnchecked())" Color="Color.Accent" />
                        }
                    </div>
                </ChildContent>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

    <!-- Container for counter and paginator -->
    <div class="paginator-container">
        <div class="left-section"></div>
        <div class="right-section">
            <FluentPaginator State="@pagination" />
        </div>
    </div>
</div>

@if (selectedOrder != null)
{
    <h2>Order Detail: @selectedOrder.ID - @selectedOrder.Client</h2>

    @if (selectedOrderItems != null && selectedOrderItems.Any())
    {
        <div class="detail-container">
            <FluentDataGrid Items="@selectedOrderItems" TGridItem="OrderLineItem" Class="detail-grid">
                <PropertyColumn Property="@(li => li.LineNumber + 1)" Title="Line" Sortable="true" />
                <PropertyColumn Property="@(li => li.ItemCode)" Title="Item" Sortable="true" />
                <PropertyColumn Property="@(li => li.Quantity)" Title="Quantity" Sortable="true" />
            </FluentDataGrid>
        </div>
    }
    else
    {
        <div class="alert alert-info" style="margin-top: 20px">
            There are no lines available for this order.
        </div>
    }
}

@code {
    record Order(int ID, string Client, DateOnly Date, DateOnly Expiration, int LineCount);
    record OrderLineItem(int LineNumber, string ItemCode, int Quantity);

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Order> orders;
    private List<OrderData> processedOrders = new List<OrderData>();
    private Order selectedOrder;
    private IQueryable<OrderLineItem> selectedOrderItems;
    private System.Threading.Timer refreshTimer;
    private bool isLoading = false;

    // Dictionary to track checked state for each order
    private Dictionary<int, bool> checkedOrders = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Clear previously selected orders when loading this page
        _selectedOrdersService.ClearSelectedOrders();
        ChargeInitialOrders();
    }

    // Method to charge initial valid orders
    public async void ChargeInitialOrders()
    {
        await LoadOrdersFromSQL();
    }

    // Method to check if an order is checked
    private bool IsOrderChecked(int orderId)
    {
        return checkedOrders.ContainsKey(orderId) && checkedOrders[orderId];
    }

    // Method to toggle the checked state
    private void ToggleCheckedState(int orderId)
    {
        if (checkedOrders.ContainsKey(orderId))
        {
            checkedOrders[orderId] = !checkedOrders[orderId];
        }
        else
        {
            checkedOrders[orderId] = true;
        }
        StateHasChanged();
    }

    // Method to navigate to LayoutBatch with selected orders
    private async Task NavigateToBatchWithSelected()
    {
        // Get IDs of selected orders
        var selectedOrderIds = checkedOrders
            .Where(kvp => kvp.Value && kvp.Key > 0)
            .Select(kvp => kvp.Key)
            .ToList();

        if (selectedOrderIds.Count == 0)
        {
            await _dialogService.ShowInfoAsync("No orders selected", "Information");
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            // Get complete OrderData from the database
            var selectedOrdersData = new List<OrderData>();
            var ordersWithErrors = new List<OrderData>();
            var errorDetails = new Dictionary<int, string>();

            foreach (var orderId in selectedOrderIds)
            {
                // Get order from database
                var order = sqlManagement.GetOrdersFromDatabase().FirstOrDefault(o => o.DocEntry == orderId);
                if (order != null)
                {
                    // Get order lines
                    var lineItems = sqlManagement.GetOrderLinesFromDatabase(orderId);

                    // Create OrderData using your current model
                    var orderData = new OrderData
                        {
                            DocEntry = order.DocEntry,
                            CardCode = order.CardCode,
                            OrderDate = order.OrderDate,
                            DocDueDate = order.DocDueDate,
                            LineItems = lineItems.Select(li => new LineItem
                            {
                                DocEntry = li.DocEntry,
                                LineNum = li.LineNum,
                                ItemCode = li.ItemCode,
                                Quantity = li.Quantity,
                                Batch = null // Batch will be assigned in LayoutBatch
                            }).ToList()
                        };

                    // Check available stock for each line
                    bool hasStockIssue = false;
                    StringBuilder errorMessageBuilder = new StringBuilder();
                    errorMessageBuilder.AppendLine($"Stock issues in order {order.DocEntry}:");
                    errorMessageBuilder.AppendLine();

                    foreach (var line in orderData.LineItems)
                    {
                        var (hasSufficientStock, availableQuantity) = await _batchService.ValidateStockAvailabilityAsync(line.ItemCode, line.Quantity);

                        if (!hasSufficientStock)
                        {
                            hasStockIssue = true;
                            errorMessageBuilder.AppendLine($"- Item: {line.ItemCode}, Required: {line.Quantity}, Available: {availableQuantity}, Difference: {line.Quantity - availableQuantity}");
                        }
                    }

                    // If order has stock issues, mark it with error
                    if (hasStockIssue)
                    {
                        string errorMessage = errorMessageBuilder.ToString();
                        await _batchService.UpdateOrderErrorStatusAsync(orderData.DocEntry, errorMessage);
                        errorDetails[orderData.DocEntry] = errorMessage;

                        var updatedOrder = sqlManagement.GetOrderWithErrorInfoFromDB(orderData.DocEntry);

                        // 3. Get updated order lines
                        var lineItem = sqlManagement.GetOrderLinesFromDatabase(orderData.DocEntry);

                        // 4. Create a complete OrderData object with all updated data
                        var completeOrderData = new OrderData
                            {
                                DocEntry = updatedOrder.DocEntry,
                                CardCode = updatedOrder.CardCode,
                                OrderDate = updatedOrder.OrderDate,
                                DocDueDate = updatedOrder.DocDueDate,
                                IsProcessed = updatedOrder.IsProcessed,
                                HasError = updatedOrder.HasError,
                                ErrorMessage = updatedOrder.ErrorMessage,
                                LineItems = lineItem
                            };

                        // 5. Generate JSON for this order with error
                        string jsonForFailedOrder = ConvertOrdersToJson(new List<OrderData> { completeOrderData });

                        var content = new StringContent(jsonForFailedOrder, Encoding.UTF8, "application/json");

                        using var client = new HttpClient();
                        var response = await client.PostAsync("http://localhost:8080/api/Order", content);

                        // 6. Add to list of orders with errors
                        ordersWithErrors.Add(completeOrderData);

                        // Optional: log JSON to console
                        Console.WriteLine($"JSON for order with error {completeOrderData.DocEntry}:");
                        Console.WriteLine(jsonForFailedOrder);
                    }
                    else
                    {
                        // If no stock issues, add to selected orders
                        selectedOrdersData.Add(orderData);
                    }
                }
            }

            // Disable loading indicator
            isLoading = false;
            StateHasChanged();

            // Error case handling
            if (selectedOrderIds.Count == 1 && ordersWithErrors.Count == 1)
            {
                // If only one order selected and it has error, show message and don't navigate
                var errorOrder = ordersWithErrors[0];
                var errorMessage = errorDetails[errorOrder.DocEntry];

                await _dialogService.ShowErrorAsync(errorMessage, $"Stock Error in Order {errorOrder.DocEntry}");
                // Don't navigate after showing error
                await LoadOrdersFromSQL();

                return;
            }
            else if (ordersWithErrors.Count > 0 && selectedOrdersData.Count == 0)
            {
                // If all orders have errors, show message and don't navigate
                var errorMessage = new StringBuilder();
                errorMessage.AppendLine("All selected orders have stock issues:");
                errorMessage.AppendLine();

                foreach (var errorOrder in ordersWithErrors)
                {
                    errorMessage.AppendLine($"- Order {errorOrder.DocEntry}: ");
                    errorMessage.AppendLine(errorDetails[errorOrder.DocEntry]);
                    errorMessage.AppendLine();
                }

                await _dialogService.ShowErrorAsync(errorMessage.ToString(), "Stock Error");
                await LoadOrdersFromSQL();

                return;
            }
            else if (ordersWithErrors.Count > 0 && selectedOrdersData.Count > 0)
            {
                // Use HTML format for the message
                var errorMessage = new StringBuilder();
                errorMessage.Append("<div style='margin-bottom: 15px;'>");
                errorMessage.Append("Some orders have stock issues and will not be processed:");
                errorMessage.Append("</div>");

                foreach (var errorOrder in ordersWithErrors)
                {
                    errorMessage.Append($"<div style='margin-top: 15px; margin-bottom: 10px;'>");
                    errorMessage.Append($"<b>- Order {errorOrder.DocEntry}:</b>");
                    errorMessage.Append("</div>");

                    // Convert error details to HTML
                    string htmlErrorDetails = errorDetails[errorOrder.DocEntry]
                        .Replace("\n", "<br/>")
                        .Replace("- Item:", "<div style='margin-top: 8px; margin-bottom: 5px;'><b>- Item:</b>")
                        .Replace("Required:", "<b>Required:</b>")
                        .Replace("Available:", "<b>Available:</b>")
                        .Replace("Difference:", "<b>Difference:</b></div>");

                    errorMessage.Append(htmlErrorDetails);
                }

                errorMessage.Append("<div style='margin-top: 25px; margin-bottom: 15px;'>");
                errorMessage.Append($"<b>Will proceed with the remaining {selectedOrdersData.Count} orders that have no errors.</b>");
                errorMessage.Append("</div>");

                // Save valid orders
                _selectedOrdersService.SetSelectedOrders(selectedOrdersData);

                // Show dialog and wait for it to close
                var dialog = await _dialogService.ShowInfoAsync(errorMessage.ToString(), "Orders with Stock Issues");
                await dialog.Result;

                // Only after "OK" is pressed or dialog is closed
                _navigationManager.NavigateTo("/LayoutBatch");


                return;
            }

            if (selectedOrdersData.Count == 0)
            {
                await _dialogService.ShowErrorAsync("Could not load selected orders", "Error");
                return;
            }

            // If we get here, all orders are valid
            Console.WriteLine($"Loading {selectedOrdersData.Count} orders to service");
            _selectedOrdersService.SetSelectedOrders(selectedOrdersData);

            // Navigate to Batch page
            _navigationManager.NavigateTo("/LayoutBatch");
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            await _dialogService.ShowErrorAsync($"Error preparing orders for batch: {ex.Message}", "Error");
            Console.WriteLine($"Complete error: {ex}");
        }
    }

    // Helper method to convert orders to JSON format
    private string ConvertOrdersToJson(List<OrderData> orders)
    {
        try
        {
            // Create an anonymous object that represents the orders in the desired format for the API
            var apiOrders = orders.Select(o => new
            {
                id = o.DocEntry,
                client = o.CardCode,
                orderDate = o.OrderDate.ToString("yyyy-MM-dd"),
                dueDate = o.DocDueDate.ToString("yyyy-MM-dd"),
                isProcessed = o.IsProcessed, // Added IsProcessed field
                hasError = o.HasError,       // Added HasError field
                errorMessage = o.ErrorMessage, // Added ErrorMessage field
                lines = o.LineItems.Select(li => new
                {
                    lineNumber = li.LineNum + 1,
                    itemCode = li.ItemCode,
                    quantity = li.Quantity
                }).ToList()
            }).ToList();

            // Serialize to JSON with indented format for better visualization
            var options = new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };

            return System.Text.Json.JsonSerializer.Serialize(apiOrders, options);
        }
        catch (Exception ex)
        {
            // In case of error, return error message as JSON
            return $"{{ \"error\": \"Error generating JSON: {ex.Message}\" }}";
        }
    }

    private async void ValidateOrdersBeforeSQL(List<OrderData> selectedOrdersData)
    {
        var ordersToSQL = selectedOrdersData;
        foreach (var order in ordersToSQL)
        {
            var cardCode = order.CardCode;
            var orderDate = order.OrderDate;
            var docDueDate = order.DocDueDate;

            // Validate that the date is valid (current date between OrderDate and DocDueDate)
            if (!ValidateOrderDate(orderDate, docDueDate))
            {
                throw new Exception($"Order {order.DocEntry} is not valid for the current date. " +
                                              $"Current date must be between {orderDate:yyyy-MM-dd} and {docDueDate:yyyy-MM-dd}, the end date has to be at least 4 days later than the current date");
            }

            // Validate if the client exists in the database
            if (!sqlManagement.ValidateActiveClients(cardCode))
            {
                throw new Exception($"Client {cardCode} does not exist in the database");
            }

            foreach (var line in order.LineItems)
            {
                // Validate if the item exists in the database
                if (!sqlManagement.GetItems(line.ItemCode))
                {
                    throw new Exception($"Item {line.ItemCode} does not exist in the database");
                }

                // Validate if there are sufficient batches for the items
                // if (!sqlManagement.GetBatches(line.ItemCode))
                // {
                //     throw new Exception($"Item {line.ItemCode} does not have any available batch");

                // }
            }
        }
        // sqlManagement.LoadOrdersToSQL(ordersToSQL);

    }


    public bool ValidateOrderDate(DateTime orderDate, DateTime docDueDate)
    {
        try
        {
            var currentDate = DateTime.Now.Date;
            var minimumDueDate = currentDate.AddDays(4);

            return currentDate >= orderDate && docDueDate >= minimumDueDate;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error validating order dates: {ex.Message}", ex);
        }
    }

    private async Task LoadOrdersFromFiles()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            // Use OrderService to get orders from TXT files
            processedOrders = await _orderService.GetOrdersAsync();

            // Validate orders before loading them to SQL
            ValidateOrdersBeforeSQL(processedOrders);

            // Load orders into SQL database
            sqlManagement.LoadOrdersToSQL(processedOrders);

            // Get orders from SQL database
            await LoadOrdersFromSQL();

            await _dialogService.ShowInfoAsync($"{processedOrders.Count} orders have been loaded into the database.", "Information");
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error loading orders: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrdersFromSQL()
    {
        try
        {
            // Get orders from database
            var sqlOrders = sqlManagement.GetOrdersFromDatabase();

            // Convert to format for the grid
            var orderList = sqlOrders.Select(o => new Order(
                o.DocEntry,
                o.CardCode,
                DateOnly.FromDateTime(o.OrderDate),
                DateOnly.FromDateTime(o.DocDueDate),
                sqlManagement.GetOrderLinesFromDatabase(o.DocEntry).Count  // Get the real number of lines
            )).ToList();

            orders = orderList.AsQueryable();

            // Initialize checkbox state
            checkedOrders.Clear();
            foreach (var order in orderList.Where(o => o.ID > 0))
            {
                checkedOrders[order.ID] = false;
            }

            // Clear current selection if it exists
            selectedOrder = null;
            selectedOrderItems = null;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error loading orders from SQL: {ex.Message}", ex);
        }
    }

    private void HandleRowClick(Order order)
    {
        if (order == null || order.ID <= 0) return;  // Ignore clicks on empty rows (ID ≤ 0)

        selectedOrder = order;
        StateHasChanged(); // Force update to show the detail section header

        try
        {
            // Get order lines from SQL
            var lineItemsFromDB = sqlManagement.GetOrderLinesFromDatabase(selectedOrder.ID);

            Console.WriteLine($"Lines retrieved for order {selectedOrder.ID}: {lineItemsFromDB.Count}");

            if (lineItemsFromDB != null && lineItemsFromDB.Any())
            {
                // Convert lines to format for the grid
                var lineItems = lineItemsFromDB
                    .Select(li => new OrderLineItem(
                        li.LineNum,
                        li.ItemCode,
                        li.Quantity
                    ))
                    .ToList();

                selectedOrderItems = lineItems.AsQueryable();
            }
            else
            {
                // If no lines found, show empty collection
                selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting lines for order {order.ID}: {ex.Message}");
            // If an error occurs, show empty collection
            selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
        }

        // Second call to StateHasChanged to update the lines grid
        StateHasChanged();
    }

    private async Task ConfirmOrderToSAP(int orderId)
    {
        try
        {
            bool result = await _orderService.ConfirmOrderToSQL(orderId);

            if (result)
            {
                await _dialogService.ShowInfoAsync($"Order {orderId} confirmed in SAP successfully.", "Confirmation");
            }
            else
            {
                await _dialogService.ShowErrorAsync($"Could not confirm order {orderId} in SAP.", "Error");
            }
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error confirming order in SAP: {ex.Message}", "Error");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}