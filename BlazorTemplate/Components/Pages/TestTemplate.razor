@using System.Text.Json
@using Newtonsoft.Json.Linq
@using System.Reflection
@using System.IO
@using BlazorTemplate.Models
@using BlazorTemplate.Interfaces
@using BlazorTemplate.Processes
@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorTemplate.Services
@inject IDialogService _dialogService
@inject IOrderService _orderService
@inject ISelectedOrdersService _selectedOrdersService
@inject NavigationManager _navigationManager
@inject SQLManagement sqlManagement
@page "/TestTemplate"
@implements IDisposable

<PageTitle>Order Management</PageTitle>
<h1>Order Management</h1>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
    <FluentButton Appearance="Appearance.Accent" OnClick="@LoadOrdersFromFiles">Cargar Comandas</FluentButton>
    <FluentSpacer />

    <FluentButton Appearance="Appearance.Accent" Style="margin-right: 40px" BackgroundColor="#28a745"
    OnClick="@(async () => await NavigateToBatchWithSelected())">
        Subir Comandas
    </FluentButton>

    @if (isLoading)
    {
        <FluentProgressRing />
        <span>Cargando comandas...</span>
    }
</FluentStack>

<!-- Contenedor principal -->
<div class="grid-and-pagination-container">
    <!-- Contenedor del grid -->
    <div class="fixed-height-grid-container">
        <FluentDataGrid Items="@orders" TGridItem="Order" Pagination="@pagination" Class="fixed-row-grid">

            <PropertyColumn Property="@(o => o.ID)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Client)" Sortable="true" />
            <PropertyColumn Property="@(o => o.Date)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.Expiration)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(o => o.LineCount)" Title="Líneas" Sortable="true" />
            <TemplateColumn Title="">
                <ChildContent>
                    <button @onclick="@(() => HandleRowClick(context))"
                    style="background: none; border: none; padding: 0; margin: 0; cursor: pointer; display: flex; justify-content: center; align-items: center;">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Eye())" Color="Color.Accent" />
                    </button>
                </ChildContent>
            </TemplateColumn>
            <TemplateColumn Title="">
                <ChildContent>
                    <div @onclick="@(() => ToggleCheckedState(context.ID))" @onclick:stopPropagation="true" style="cursor: pointer;">
                        @if (IsOrderChecked(context.ID))
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxChecked())" Color="Color.Accent" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxUnchecked())" Color="Color.Accent" />
                        }
                    </div>
                </ChildContent>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

    <!-- Contenedor para el contador y paginador -->
    <div class="paginator-container">
        <div class="left-section"></div>
        <div class="right-section">
            <FluentPaginator State="@pagination" />
        </div>
    </div>
</div>

@if (selectedOrder != null)
{
    <h2>Detalle de Comanda: @selectedOrder.ID - @selectedOrder.Client</h2>

    @if (selectedOrderItems != null && selectedOrderItems.Any())
    {
        <div class="detail-container">
            <FluentDataGrid Items="@selectedOrderItems" TGridItem="OrderLineItem" Class="detail-grid">
                <PropertyColumn Property="@(li => li.LineNumber + 1)" Title="Línea" Sortable="true" />
                <PropertyColumn Property="@(li => li.ItemCode)" Title="Artículo" Sortable="true" />
                <PropertyColumn Property="@(li => li.Quantity)" Title="Cantidad" Sortable="true" />
            </FluentDataGrid>
        </div>
    }
    else
    {
        <div class="alert alert-info" style="margin-top: 20px">
            No hay líneas disponibles para esta comanda.
        </div>
    }
}

@code {
    record Order(int ID, string Client, DateOnly Date, DateOnly Expiration, int LineCount);
    record OrderLineItem(int LineNumber, string ItemCode, int Quantity);

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Order> orders;
    private List<OrderData> processedOrders = new List<OrderData>();
    private Order selectedOrder;
    private IQueryable<OrderLineItem> selectedOrderItems;
    private System.Threading.Timer refreshTimer;
    private bool isLoading = false;

    // Dictionary to track checked state for each order
    private Dictionary<int, bool> checkedOrders = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Limpiar órdenes seleccionadas anteriores al cargar esta página
        _selectedOrdersService.ClearSelectedOrders();
    }

    // Method to check if an order is checked
    private bool IsOrderChecked(int orderId)
    {
        return checkedOrders.ContainsKey(orderId) && checkedOrders[orderId];
    }

    // Method to toggle the checked state
    private void ToggleCheckedState(int orderId)
    {
        if (checkedOrders.ContainsKey(orderId))
        {
            checkedOrders[orderId] = !checkedOrders[orderId];
        }
        else
        {
            checkedOrders[orderId] = true;
        }
        StateHasChanged();
    }

    // Método para navegar a LayoutBatch con las órdenes seleccionadas
    private async Task NavigateToBatchWithSelected()
    {
        // Obtener IDs de órdenes seleccionadas
        var selectedOrderIds = checkedOrders
            .Where(kvp => kvp.Value && kvp.Key > 0)
            .Select(kvp => kvp.Key)
            .ToList();

        if (selectedOrderIds.Count == 0)
        {
            await _dialogService.ShowInfoAsync("No hay comandas seleccionadas", "Información");
            return;
        }

        // Obtener las órdenes completas usando los IDs
        var selectedOrdersData = processedOrders
            .Where(o => selectedOrderIds.Contains(o.DocEntry))
            .ToList();

        // Guardar en el servicio compartido
        _selectedOrdersService.SetSelectedOrders(selectedOrdersData);

        ValidateOrdersBeforeSQL(selectedOrdersData);

        // Navegar a la página de Batch
        _navigationManager.NavigateTo("/LayoutBatch");
    }

    private async void ValidateOrdersBeforeSQL(List<OrderData> selectedOrdersData)
    {
        var ordersToSQL = selectedOrdersData;
        foreach (var order in ordersToSQL)
        {
            var cardCode = order.CardCode;
            var orderDate = order.OrderDate;
            var docDueDate = order.DocDueDate;

            // Validar que la fecha sea valida (fecha current entre OrderDate y DocDueDate)
            if (!ValidateOrderDate(orderDate, docDueDate))
            {
                throw new Exception($"Order {order.DocEntry} is not valid for the current date. " +
                                              $"Current date must be between {orderDate:yyyy-MM-dd} and {docDueDate:yyyy-MM-dd}");
            }

            // Validar si el cliente existe en la BBDD
            if (!sqlManagement.ValidateActiveClients(cardCode))
            {
                throw new Exception($"Client {cardCode} does not exist in the database");
            }

            foreach (var line in order.LineItems)
            {
                // Validar si el item existe en la BBDD
                if (!sqlManagement.GetItems(line.ItemCode))
                {
                    throw new Exception($"Item {line.ItemCode} does not exist in the database");
                }

                // Validar si hay batches suficientes para los items
                if (!sqlManagement.GetBatches(line.ItemCode))
                {
                    throw new Exception($"Item {line.ItemCode} does not have any available batch");

                }
            }
        }
        sqlManagement.LoadOrdersToSQL(ordersToSQL);

    }


    public bool ValidateOrderDate(DateTime orderDate, DateTime docDueDate)
    {
        try
        {
            var currentDate = DateTime.Now;
            return currentDate >= orderDate && currentDate <= docDueDate;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error validating order dates: {ex.Message}", ex);
        }
    }
    private async Task LoadOrdersFromFiles()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            // Usar OrderService para obtener órdenes
            processedOrders = await _orderService.GetOrdersAsync();

            // Convertir a formato para la grid
            var orderList = processedOrders.Select(o => new Order(
                o.DocEntry,
                o.CardCode,
                DateOnly.FromDateTime(o.OrderDate),
                DateOnly.FromDateTime(o.DocDueDate),
                o.LineItems.Count  // Mostrar número de líneas
            )).ToList();

            // Si hay menos órdenes que el tamaño de página, rellenar con filas vacías
            int itemsToAdd = Math.Max(0, pagination.ItemsPerPage - orderList.Count);
            for (int i = 0; i < itemsToAdd; i++)
            {
                // Usar IDs negativos para evitar conflictos de clave
                orderList.Add(new Order(-i - 1, $"Empty-{i + 1}", new DateOnly(), new DateOnly(), 0));
            }

            orders = orderList.AsQueryable();

            // Inicializar estado de checkboxes
            checkedOrders.Clear();
            foreach (var order in orderList.Where(o => o.ID > 0))
            {
                checkedOrders[order.ID] = false;
            }

            // Limpiar la selección actual si existe
            selectedOrder = null;
            selectedOrderItems = null;

            await _dialogService.ShowInfoAsync($"Se han cargado {processedOrders.Count} comandas.", "Información");
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error al cargar comandas: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleRowClick(Order order)
    {
        if (order == null || order.ID <= 0) return;  // Ignorar clics en filas vacías (ID ≤ 0)

        selectedOrder = order;
        StateHasChanged(); // Forzar actualización para mostrar el encabezado de la sección de detalles

        // Busca en las órdenes procesadas
        var orderData = processedOrders.FirstOrDefault(o => o.DocEntry == selectedOrder.ID);

        if (orderData != null && orderData.LineItems.Any())
        {
            // Convertir las líneas al formato para la grid
            var lineItems = orderData.LineItems
                .Select(li => new OrderLineItem(
                    li.LineNum,
                    li.ItemCode,
                    li.Quantity
                ))
                .ToList();

            selectedOrderItems = lineItems.AsQueryable();
        }
        else
        {
            // Si no se encuentran líneas, mostrar una colección vacía
            selectedOrderItems = Array.Empty<OrderLineItem>().AsQueryable();
        }

        // Segunda llamada a StateHasChanged para actualizar la grid de líneas
        StateHasChanged();
    }

    private async Task ConfirmOrderToSAP(int orderId)
    {
        try
        {
            bool result = await _orderService.ConfirmOrderToSAP(orderId);

            if (result)
            {
                await _dialogService.ShowInfoAsync($"Orden {orderId} confirmada en SAP con éxito.", "Confirmación");
            }
            else
            {
                await _dialogService.ShowErrorAsync($"No se pudo confirmar la orden {orderId} en SAP.", "Error");
            }
        }
        catch (Exception ex)
        {
            await _dialogService.ShowErrorAsync($"Error al confirmar la orden en SAP: {ex.Message}", "Error");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}